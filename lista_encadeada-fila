#include <stdio.h>
#include <stdlib.h>

typedef int t_dado;

typedef struct t_no {
    t_dado numero;
    struct t_no *prox;
} t_no;

typedef struct t_fila {
    t_no *prim, *ultimo;
} t_fila;

void criar_fila(t_fila *fila) {
    fila -> prim = NULL;
    fila -> ultimo = NULL;
}

int tamanho(t_fila *fila) {
 t_no *aux = fila -> prim; int t = 0;
 while (aux)
     t++, aux = aux -> prox;
 return t;
}

void enfileirar(t_fila *fila, int numrero) {
    t_no *novo_ultimo = (t_no *) malloc(sizeof(t_no));
    novo_ultimo -> numero = numrero;
    novo_ultimo -> prox = NULL;
    if (fila -> prim)
        fila -> ultimo -> prox = novo_ultimo,
        fila -> ultimo = novo_ultimo;
     else
        fila -> prim = novo_ultimo,
        fila -> ultimo = novo_ultimo;
}

void furar_fila(t_fila *fila, t_dado numero, int posicao) {
    if (posicao > 0 && posicao <= tamanho(fila)) {
        t_no *fdp, *temp, *prox;
        fdp = malloc(sizeof(t_no));
        fdp -> numero = numero;
        temp = fila -> prim;
        prox = temp -> prox;
        if (posicao > 1 && prox) {
            int prox_pos = 2;
            while (prox_pos < posicao && prox)
                prox_pos++,
                temp = prox,
                prox = temp -> prox;
            fdp -> prox = prox;
            temp -> prox = fdp;
        }
        else
            fdp -> prox = temp,
            fila -> prim = fdp;
    }
    else
        printf("(posicao invalida)\n");
}

void desenfileirar(t_fila *fila, t_dado *resultado) {
 t_no *atual = fila -> prim;
 if (atual)
  *resultado = atual -> numero,
  fila -> prim = atual -> prox,
  free(atual);
}

void mostrar_fila(t_fila *fila) {
 t_no *atual = fila -> prim;
 printf("[");
 if (atual) {
  while (atual)
   printf("%d,", atual -> numero),
   atual = atual -> prox;
  printf("\b");
 }
 printf("]\n");
}

void intercalar_filas(t_fila *fila_1, t_fila *fila_2) {
    t_no *p1 = fila_1 -> prim, *p2;   // 1 ponteiro pra cada fila;
    while (p1 && fila_2 -> prim)      // enquanto p1 apontar pra um nó na fila 1 e houver o 1º na fila 2
        p2 = fila_2 -> prim,          // ent p2 recebe o 1º da fila 2,
        fila_2 -> prim = p2 -> prox,  // o seguinte a p2 vira o 1º da fila 2 (isso vai diminuir a fila 2) e
        p2 -> prox = p1 -> prox,      // o seguinte a p2 recebe o seguinte a p1 (1º muda em p2, se não, dá errado);
        p1 -> prox = p2,              // o seguinte a p1 recebe p2 (intercalou);
        p1 = p2 -> prox;              // p1 agr aponta pro seguinte a p2 (q era o prox da fila 1);
    if (!p1)                          // se n houver fila 1 ou se p1 aponta pro nada
        p2 -> prox = fila_2 -> prim;  // ent o seguinte a p2 recebe o resto da fila 2.
}

void append_(t_dado numero, t_fila *fila) {
    if (fila -> prim) {
        t_no *node = fila -> prim;
        while (node -> prox)
            node = node -> prox;
        node -> prox = (t_no *) malloc(sizeof(t_no)),
        node -> prox -> numero = numero,
        node -> prox -> prox = NULL;
    }
    else
        fila -> prim = (t_no *) malloc(sizeof(t_no)),
        fila -> prim -> numero = numero,
        fila -> prim -> prox = NULL;
}

void separar_fila(t_fila *fila_1, t_fila *fila_2) {
    t_no *a = fila_1 -> prim, *b;
    if (a) {
        b = a -> prox;
        while (a && b) {
            enfileirar(fila_2, b -> numero),
            a -> prox = b -> prox;
            a = b -> prox;
            if (a)
                b = a -> prox;
        }
    }
}

char func(t_fila *fila, int chave) {
    int acc = 0;
    t_no *x = fila -> prim;
    while (x)
        acc += x -> numero,
        x = x -> prox;
    return acc > chave;
}

int ha_intersecao(t_fila *f_1, t_fila *f_2) {
    t_no *x1 = f_1 -> prim, *x2;
    while (x1) {
        x2 = f_2 -> prim;
        while (x2) {
            if (x1 -> numero == x2 -> numero)
                return x1 -> numero;
            x2 = x2 -> prox;
        }
        x1 = x1 -> prox;
    }
    return 0;
}

/*int main() {
//    mostrar_fila(&fila);
//    enfileirar(&fila, 1);
//    mostrar_fila(&fila);
//    enfileirar(&fila, 2);
//    mostrar_fila(&fila);
//    enfileirar(&fila, 3);
//    mostrar_fila(&fila);
//    enfileirar(&fila, 4);
//    mostrar_fila(&fila);
//    enfileirar(&fila, 5);
//    mostrar_fila(&fila);
//    furar_fila(&fila, 0, 5);
//    mostrar_fila(&fila);
//    desenfileirar(&fila, &dado);
//    mostrar_fila(&fila);
//    desenfileirar(&fila, &dado);
//    mostrar_fila(&fila);
//    desenfileirar(&fila, &dado);
//    mostrar_fila(&fila);
//    furar_fila(&fila, 9, 3);
//    mostrar_fila(&fila);
//    desenfileirar(&fila, &dado);
//    mostrar_fila(&fila);
//    desenfileirar(&fila, &dado);
//    mostrar_fila(&fila);
//    desenfileirar(&fila, &dado);
//    mostrar_fila(&fila);
//    furar_fila(&fila, 7, 0);
//    mostrar_fila(&fila);
//    desenfileirar(&fila, &dado);
//    mostrar_fila(&fila);
*//*
    t_fila fila_1, fila_2; t_dado dado;
    criar_fila(&fila_1);
    criar_fila(&fila_2);
    enfileirar(&fila_1, 1),
    enfileirar(&fila_1, 2),
    enfileirar(&fila_1, 3),
    enfileirar(&fila_2, 4),
    enfileirar(&fila_2, 2),
    enfileirar(&fila_2, 6),
    printf("fila 1: "); mostrar_fila(&fila_1);
    printf("fila 2: "); mostrar_fila(&fila_2);
    intercalar_filas(&fila_1, &fila_2),
    printf("\nfila 1: "); mostrar_fila(&fila_1);
    printf("fila 2: "); mostrar_fila(&fila_2);
    separar_fila(&fila_1, &fila_2);
    printf("\nfila 1: "); mostrar_fila(&fila_1);
    printf("fila 2: "); mostrar_fila(&fila_2);
*//*
//    printf("\n%hhd", func(&fila_1, 7));
//    printf("\n%hhd", func(&fila_2, 7));
//    int num = ha_intersecao(&fila_1, &fila_2);
//    if (num)
//        printf("tem intersecao: %d\n", num);

}*/

