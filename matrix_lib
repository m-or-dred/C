
#ifndef TESTES_MATRIX_H
#define TESTES_MATRIX_H
#endif

#include "libs.h"
#include "array.h"

#define LIN 2
#define COL 2

unsigned char bigger(float **mat_1, F **mat_2) {
 unsigned i, j;
 for (i = 0; i < LIN; i++)
  for (j = 0; j < COL; j++)
   if (mat_1[i][j] <= mat_2[i][j])
    return 0;
 return 1;
}
bool find_trio(C key, C **mat, U size) {
 U i, j, acc_1, acc_2, acc_3 = 0, acc_4 = 0;
 for (i = 0; i < size; ++i){
  acc_1 = 0,
  acc_2 = 0,
  acc_3 += mat[i][i],
  acc_4 += mat[i][size-1-i];
  for (j = 0; j < size; ++j)
   acc_1 += mat[i][j],
   acc_2 += mat[j][i];
  if (acc_1 == key * size ||
      acc_2 == key * size ||
      acc_3 == key * size ||
      acc_4 == key * size)
   return TRUE;
 }
 return FALSE;
}
bool ld_lines(I **mat) {
 unsigned i, j, k;
 for (i = 0; i < LIN-1; ++i)
  for (k = i+1; k < LIN; ++k)
   for (j = 0; j < COL; ++j)
    if (mat[i][j] % mat[k][j] || mat[k][j] % mat[i][j])
     return FALSE;
 return TRUE;
}
bool id_mat(F **mat) {
 U i, j;
 for (i = 0; i < LIN; ++i)
  for (j = 0; j < COL; ++j)
   if (i != j && mat[i][j] || i == j && mat[i][j] != 1)
    return FALSE;
 return TRUE;
}
bool in_mat(F key, F **mat, U n) {
 unsigned i, j;
 for (i = 0; i < n; ++i)
  for (j = 0; j < n; ++j)
   if (mat[i][j] == key)
    return TRUE;
 return FALSE;
}
bool null_mat(F **mat) {
 unsigned i, j;
 for (i = 0; i < LIN; ++i)
  for (j = 0; j < COL; ++j)
   if (mat[i][j])
    return FALSE;
 return TRUE;
}
I min_3(I num_1, I num_2, I num_3){
 I min = num_1;
 if (num_2 < num_1)
  min = num_2;
 if (num_3 < min)
  min = num_3;
 return min;
}
UC edit_dist(C *str_1, C *str_2) {
 unsigned char i, j,
  m = 1 + strlen(str_1),
  n = 1 + strlen(str_2),
  mat[m][n];

 for (i = 0; i < m; ++i)
  mat[i][0] = i;

 for (j = 1; j < n; ++j)
  mat[0][j] = j;

 for (i = 1; i < m; ++i)
  for (j = 1; j < n; ++j){
   if (str_1[i-1] == str_2[j-1])
    mat[i][j] = mat[i-1][j-1];
   else
    mat[i][j] = 1 + min_3(mat[i][j-1], mat[i-1][j], mat[i-1][j-1]);
  }
 return mat[m-1][n-1];
}
V mat_dif(F **mat_1, F **mat_2) {
 unsigned i, j;
 for (i = 0; i < LIN; ++i)
  for (j = 0; j < COL; ++j)
   mat_1[i][j] -= mat_2[i][j];
}
V mat_mul(F **mat_1, F **mat_2, F **mat_3) {
 unsigned i, j, k;
 for (i = 0; i < LIN; ++i)
  for (j = 0; j < COL; ++j)
   for (k = 0; k < LIN; ++k)
    mat_1[i][k] += mat_2[i][j] * mat_3[j][k];
}
V mat_sum(F **mat_1, F **mat_2) {
 unsigned i, j;
 for (i = 0; i < LIN; ++i)
  for (j = 0; j < COL; ++j)
   mat_1[i][j] += mat_2[i][j];
}
V annul_mat(C **mat, U size) {
 unsigned i, j;
 for (i = 0; i < size; ++i)
  for (j = 0; j < size; ++j)
   mat[i][j] = 0;
}
V show_mat(C **mat, U size) {
 unsigned i, j;
 for (i = 0; i < size; ++i)
  for (j = 0; j < size; ++j)
   printf("%c ", mat[i][j]);
}
V func_1(F **mat_1, F **mat_2, I n, F *arr) {
 unsigned i, j, k = 0;
 for (i = 0; i < n; ++i)
  for (j = 0; j < n; ++j)
   if (in_mat(mat_1[i][j], mat_2, n) && !in_arr(mat_1[i][j], arr, k))
    arr[k] = mat_1[i][j], ++k;
}
